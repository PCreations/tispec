<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>TiSpec</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">


    <link href="bootstrap/css/bootstrap.min.css" rel="stylesheet" media="screen">
    <link href="bootstrap/css/bootstrap-responsive.css" rel="stylesheet">
    <link href="css/styles.css" rel="stylesheet">

    <script src="lib/jquery-1.9.1.min.js"></script>
    <script src="lib/underscore-min.js"></script>
    <script src="lib/backbone-min.js"></script>
    <script src="bootstrap/js/bootstrap.js"></script>

    <script src="js/app.js"></script>
    <script src="js/models/SubSpec.js"></script>
    <script src="js/models/Spec.js"></script>
    <script src="js/models/Suite.js"></script>
    <script src="js/models/TestSuite.js"></script>
    <script src="js/views/testsuite.js"></script>

    <!--
    <script type="text/javascript" src="/socket.io/socket.io.js"></script>
    -->
  </head>

  <body data-spy="scroll" data-target=".bs-docs-sidebar">

      <div class="row-fluid">
        <div class="page-header" style="margin-top: 0px;">
          <h1 style="padding-left: 20px;">Tispec <small>The ultimate Titanium test engine</small></h1>
        </div>
      </div>

      <div id="specs_screenshots_errors"></div>

      <div id="specs_suites" class="row-fluid">
        <!-- specs_suites here -->
      </div>

    </div>
  </body>

  <script type="text/javascript">
/*
    var socket, specsSuiteViews = {};

    // Socket
    // =========================================================================

    socket = io.connect('http://localhost');

    socket.on('confirmSpec', function (expectedBehavior) {
      getSpecsSuiteView(expectedBehavior.specsSuiteId).confirmManualSpec(expectedBehavior);
    });

    socket.on('screenshotError', function(_spec) {
      var specsSuite = getSpecsSuite(_spec.specsSuiteId),
          spec       = specsSuite.getSpec(_spec.id);

      spec.setScreenshotError(_spec.errorType, _spec.expectedImage, _spec.actualImage, _spec.specAlias)
    });

    socket.on('hello', function(_specsSuite) {
      var specSuiteView = new SpecsSuiteView(socket, _specsSuite.id, _specsSuite.appName, _specsSuite.appVersion, _specsSuite.deviceName, _specsSuite.deviceModel)

      specsSuiteViews[specSuiteView.id] = specSuiteView
    });

    socket.on('start', function(_specsSuite) {
      getSpecsSuite(_specsSuite.specsSuiteId).setTotalCount(_specsSuite.totalCount);
    });

    socket.on('specStart', function(_spec) {
      var spec = new Spec(_spec.id, _spec.suiteName, _spec.description);

      getSpecsSuite(_spec.specsSuiteId).addSpec(spec);
    });

    socket.on('specEnd', function(_spec) {
      var specsSuite = getSpecsSuite(_spec.specsSuiteId),
          spec       = specsSuite.getSpec(_spec.id);

      spec.setResult(_spec.totalCount, _spec.passedCount, _spec.failedCount, _spec.passed, _spec.subSpecs);
    });

    socket.on('suiteEnd', function(_suite) {
      var suite = new Suite(_suite.specsSuiteId, _suite.description, _suite.totalCount, _suite.passedCount);

      getSpecsSuite(_suite.specsSuiteId).addSuite(suite);
    });

    socket.on('end', function(specsSuiteId) {
      getSpecsSuiteView(specsSuiteId).end();
    });

    function getSpecsSuiteView(id)             { return specsSuiteViews[id]; }
    function getSpecsSuite(id)                 { return getSpecsSuiteView(id).getSpecsSuite(); }
    function runSpecs(specsSuiteId, form)      { return getSpecsSuiteView(specsSuiteId).runSpecs(form); }
    function validateSpec(specsSuiteId, valid) { getSpecsSuiteView(specsSuiteId).setManualSpecResult(valid); }
    function changeSpecScreenshot(specsSuiteId, specId) {
      return getSpecsSuiteView(specsSuiteId).changeSpecScreenshot(specId);
    }

    function endSpecsSuite(specsSuiteId) {
      delete specsSuiteViews[specsSuiteId];
      $('#specs_suite_' + specsSuiteId).remove();
    }
*/
  </script>

</html>
